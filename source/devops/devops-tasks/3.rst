Я помогу вам составить задание для урока, которое плавно проведет студентов от работы с `docker-compose` к `Kubernetes`, `GitLab` и завершится использованием `Helm`. Задание будет логичным, последовательным и практичным. Вот пример:

---

### Задание для урока: Развертывание приложения от Docker Compose до Helm

#### Цель:
Научиться разворачивать простое веб-приложение, начиная с локальной разработки с использованием `docker-compose`, затем перенести его в `Kubernetes` с автоматизацией через `GitLab CI/CD`, и наконец упаковать в `Helm chart` для удобного управления.

#### Условие:
Вы разрабатываете простое веб-приложение (например, на основе Python Flask или Node.js), которое выводит сообщение "Hello, DevOps!" на главной странице. Ваша задача — пройти весь путь от локального запуска до развертывания в кластере Kubernetes с использованием современных инструментов.

---

### Этап 1: Локальный запуск с Docker Compose
1. **Создайте структуру проекта:**
   - Напишите простое веб-приложение (например, Flask или Express.js).
   - Создайте `Dockerfile` для контейнеризации приложения.
2. **Настройте docker-compose:**
   - Создайте файл `docker-compose.yml`, который запускает ваше приложение и добавляет базу данных (например, PostgreSQL или Redis) как зависимость.
   - Убедитесь, что приложение доступно по адресу `http://localhost:8080` после запуска команды `docker-compose up`.

**Примерный результат:**
- Файл `docker-compose.yml` с двумя сервисами: `app` (ваше приложение) и `db` (база данных).
- Приложение работает локально и отвечает на запросы.

---

### Этап 2: Переход к Kubernetes
1. **Подготовьте манифесты Kubernetes:**
   - Создайте файл `deployment.yaml` для развертывания вашего приложения (с 2 репликами).
   - Добавьте `service.yaml` типа `LoadBalancer` для доступа к приложению извне.
   - (Опционально) Настройте `configmap.yaml` или `secret.yaml` для передачи конфигурации (например, строки подключения к базе данных).
2. **Запустите приложение в Kubernetes:**
   - Используйте локальный кластер (например, Minikube или Kind).
   - Примените манифесты командой `kubectl apply -f .`.
   - Проверьте, что приложение доступно через `kubectl port-forward` или IP-адрес сервиса.

**Примерный результат:**
- Приложение развернуто в Kubernetes и доступно через браузер.

---

### Этап 3: Интеграция с GitLab CI/CD
1. **Создайте репозиторий в GitLab:**
   - Загрузите проект (включая `Dockerfile`, `docker-compose.yml` и манифесты Kubernetes) в GitLab.
2. **Настройте пайплайн:**
   - Создайте файл `.gitlab-ci.yml`.
   - Добавьте этапы:
     - `build`: сборка Docker-образа и публикация в GitLab Container Registry.
     - `deploy`: развертывание в Kubernetes (используйте `kubectl` или утилиту `helm`, если хотите предвосхитить следующий этап).
   - Настройте переменные окружения в GitLab (например, доступ к кластеру Kubernetes).
3. **Проверьте автоматизацию:**
   - Сделайте коммит в репозиторий и убедитесь, что пайплайн успешно собирает и разворачивает приложение.

**Примерный результат:**
- Приложение автоматически разворачивается в Kubernetes после каждого коммита в основную ветку.

---

### Этап 4: Упаковка в Helm
1. **Создайте Helm chart:**
   - Сгенерируйте базовую структуру Helm chart командой `helm create my-app`.
   - Перенесите манифесты Kubernetes (`Deployment`, `Service`, `ConfigMap`) в папку `templates`.
   - Настройте файл `values.yaml` для параметризации (например, количество реплик, порт, образ Docker).
2. **Установите приложение с помощью Helm:**
   - Выполните `helm install my-app ./my-app` в вашем кластере.
   - Проверьте, что приложение работает.
3. **Обновите приложение:**
   - Измените значения в `values.yaml` (например, увеличьте число реплик) и выполните `helm upgrade`.

**Примерный результат:**
- Приложение упаковано в Helm chart и может быть легко установлено, обновлено или удалено из кластера.

---

### Итоговые требования:
- Предоставьте преподавателю:
  - Ссылку на репозиторий GitLab с проектом.
  - Скриншоты работающего приложения на каждом этапе (локально, в Kubernetes, через Helm).
  - Краткое описание, как запустить проект на каждом этапе.

---

### Подсказки для преподавателя:
- Для упрощения можно использовать Minikube или Kind как локальный кластер Kubernetes.
- Если студенты не знакомы с GitLab, можно заменить его на GitHub Actions (но тогда потребуется адаптация CI/CD).
- В качестве базы данных можно взять что-то простое, например SQLite, чтобы не усложнять настройку.

---

Это задание позволит студентам последовательно освоить ключевые инструменты DevOps, начиная с простого и переходя к более сложным концепциям. Если нужно что-то уточнить или адаптировать под ваш уровень студентов, дайте знать!
