Хорошо, давайте добавим конкретики в задание. Я приведу пример с использованием Python Flask как веб-приложения, PostgreSQL как базы данных, и точные команды/конфигурации для каждого этапа. Задание будет максимально практичным и детализированным.

---

### Задание для урока: Развертывание приложения "Hello, DevOps!" от Docker Compose до Helm

#### Цель:
Создать веб-приложение, которое отображает "Hello, DevOps!" и количество посещений, хранящееся в базе данных. Пройти путь от локального запуска с `docker-compose` до автоматизированного развертывания в `Kubernetes` с использованием `GitLab CI/CD` и `Helm`.

#### Инструменты:
- Python 3.9+, Flask
- Docker, Docker Compose
- Minikube (локальный кластер Kubernetes)
- GitLab
- Helm

#### Структура проекта:
```
hello-devops/
├── app/
│   ├── app.py
│   ├── requirements.txt
│   └── Dockerfile
├── docker-compose.yml
├── k8s/
│   ├── deployment.yaml
│   ├── service.yaml
│   └── configmap.yaml
├── .gitlab-ci.yml
└── helm/
    └── my-app/
        ├── Chart.yaml
        ├── values.yaml
        └── templates/
```

---

### Этап 1: Локальный запуск с Docker Compose

1. **Создайте веб-приложение:**
   - Файл `app/app.py`:
     ```python
     from flask import Flask
     import os
     import psycopg2

     app = Flask(__name__)

     def get_db_connection():
         conn = psycopg2.connect(
             host="db",
             database="postgres",
             user="postgres",
             password="mysecretpassword"
         )
         return conn

     @app.route('/')
     def hello():
         conn = get_db_connection()
         cur = conn.cursor()
         cur.execute("CREATE TABLE IF NOT EXISTS visits (id SERIAL PRIMARY KEY, count INT);")
         cur.execute("INSERT INTO visits (count) VALUES (1) ON CONFLICT (id) DO UPDATE SET count = visits.count + 1 RETURNING count;")
         count = cur.fetchone()[0]
         conn.commit()
         cur.close()
         conn.close()
         return f"Hello, DevOps! Visits: {count}"

     if __name__ == '__main__':
         app.run(host='0.0.0.0', port=5000)
     ```
   - Файл `app/requirements.txt`:
     ```
     flask==2.3.2
     psycopg2-binary==2.9.6
     ```
   - Файл `app/Dockerfile`:
     ```dockerfile
     FROM python:3.9-slim
     WORKDIR /app
     COPY requirements.txt .
     RUN pip install -r requirements.txt
     COPY app.py .
     CMD ["python", "app.py"]
     ```

2. **Настройте docker-compose:**
   - Файл `docker-compose.yml`:
     ```yaml
     version: '3.8'
     services:
       app:
         build: ./app
         ports:
           - "8080:5000"
         depends_on:
           - db
       db:
         image: postgres:13
         environment:
           POSTGRES_PASSWORD: mysecretpassword
     ```
3. **Запустите приложение:**
   - Выполните: `docker-compose up --build`
   - Откройте `http://localhost:8080` в браузере, обновите страницу несколько раз и убедитесь, что счетчик посещений увеличивается.

---

### Этап 2: Переход к Kubernetes

1. **Создайте манифесты Kubernetes:**
   - Файл `k8s/deployment.yaml`:
     ```yaml
     apiVersion: apps/v1
     kind: Deployment
     metadata:
       name: hello-devops-app
     spec:
       replicas: 2
       selector:
         matchLabels:
           app: hello-devops
       template:
         metadata:
           labels:
             app: hello-devops
         spec:
           containers:
           - name: app
             image: hello-devops-app:latest
             ports:
             - containerPort: 5000
             env:
             - name: POSTGRES_HOST
               valueFrom:
                 configMapKeyRef:
                   name: app-config
                   key: db-host
     ```
   - Файл `k8s/service.yaml`:
     ```yaml
     apiVersion: v1
     kind: Service
     metadata:
       name: hello-devops-service
     spec:
       selector:
         app: hello-devops
       ports:
       - port: 80
         targetPort: 5000
       type: LoadBalancer
     ```
   - Файл `k8s/configmap.yaml`:
     ```yaml
     apiVersion: v1
     kind: ConfigMap
     metadata:
       name: app-config
     data:
       db-host: "db-service"
     ```
   - (Примечание: База данных PostgreSQL также должна быть развернута в Kubernetes, но для простоты можно временно использовать внешнюю базу или добавить ее как отдельный `Deployment` и `Service`.)

2. **Запустите в Minikube:**
   - Установите Minikube: `minikube start`
   - Сборка образа: `docker build -t hello-devops-app:latest ./app`
   - Примените манифесты: `kubectl apply -f k8s/`
   - Проверьте доступ: `minikube service hello-devops-service --url` и откройте URL в браузере.

---

### Этап 3: Интеграция с GitLab CI/CD

1. **Создайте `.gitlab-ci.yml`:**
   ```yaml
   stages:
     - build
     - deploy

   build:
     stage: build
     image: docker:20
     services:
       - docker:dind
     script:
       - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
       - docker build -t $CI_REGISTRY_IMAGE:latest ./app
       - docker push $CI_REGISTRY_IMAGE:latest

   deploy:
     stage: deploy
     image: bitnami/kubectl:latest
     script:
       - kubectl config use-context minikube # Замените на ваш кластер
       - kubectl set image deployment/hello-devops-app app=$CI_REGISTRY_IMAGE:latest
       - kubectl rollout status deployment/hello-devops-app
   ```

2. **Настройте GitLab:**
   - Создайте репозиторий и загрузите проект.
   - Добавьте переменные в GitLab CI/CD Settings: `CI_REGISTRY`, `CI_REGISTRY_USER`, `CI_REGISTRY_PASSWORD`.
   - Сделайте коммит и проверьте, что пайплайн выполняется.

---

### Этап 4: Упаковка в Helm

1. **Создайте Helm chart:**
   - Выполните: `helm create helm/my-app`
   - Перенесите манифесты из `k8s/` в `helm/my-app/templates/`.
   - Обновите `helm/my-app/values.yaml`:
     ```yaml
     replicaCount: 2
     image:
       repository: hello-devops-app
       tag: latest
     service:
       type: LoadBalancer
       port: 80
     config:
       dbHost: "db-service"
     ```

2. **Установите и протестируйте:**
   - Установите: `helm install my-release helm/my-app`
   - Проверьте: `minikube service my-release-my-app --url`
   - Обновите: Измените `replicaCount` на 3 и выполните `helm upgrade my-release helm/my-app`.

---

### Итоговые требования:
- Загрузите проект в GitLab.
- Предоставьте скриншоты:
  1. Страницы "Hello, DevOps! Visits: X" с `docker-compose`.
  2. Вывод `kubectl get pods` после развертывания в Kubernetes.
  3. Успешный пайплайн в GitLab.
  4. Вывод `helm list` и работающее приложение через Helm.

---

Это конкретное задание с кодом, командами и ожидаемыми результатами. Если что-то нужно упростить или усложнить, дайте знать!
